# Dependencies and Setup
import pandas as pd
from pathlib import Path

# File to Load (Remember to Change These)
school_data_to_load = Path("Resources/schools_complete.csv")
student_data_to_load = Path("Resources/students_complete.csv")

# Read School and Student Data File and store into Pandas DataFrames
school_data = pd.read_csv(school_data_to_load)
student_data = pd.read_csv(student_data_to_load)

school_data.head()

student_data.head()

# Combine the data into a single dataset using left join using school name as the key for merging
#display the data
school_data_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])
school_data_complete.head()

#Show the column information to review data types to determine if any data type manipulation is needed, also review nulls for possible data issues
#It appears based on the student count that the fields have the proper data for each student as non-null counts match the student count.
school_data_complete.info()

# Determine the total number of unique schools
school_count = len(school_data)

# Determine the total number of students
student_count = len(student_data)

# Sum the budget from school_data to get the total budget
total_budget = school_data.budget.sum()

# Calculate the average (mean) math score using merged data math score
average_math_score = school_data_complete.math_score.mean()

# Calculate the average (mean) reading score using merged data readin score
average_reading_score = school_data_complete.reading_score.mean()

# Determine the percentage of students who passed math with a passing grade greather than or equal to 70
# Use the merged data mathscore field and only count those rows with a math score greater than or equal to 70 assign to passing_math_count
# Use passing_math_count and divide by the student count calculated above to get the decimal then multiply by 100 to get the true percent
# Lastly assign to passing_math_percentage
passing_math_count = school_data_complete[(school_data_complete["math_score"] >= 70)].count()["student_name"]
passing_math_percentage = passing_math_count / float(student_count) * 100

# Determine the percentage of students who passed reading with a passing grade greather than or equal to 70
# Use the merged data reading score field and only count those rows with a reading score greater than or equal to 70 assign to passing_reading_count
# Use passing_reading_count and divide by the student count calculated above to get the decimal then multiply by 100 to get the true percent
# Lastly assign to passing_reading_percentage
passing_reading_count = school_data_complete[(school_data_complete["reading_score"] >= 70)].count()["student_name"]
passing_reading_percentage = passing_reading_count / float(student_count) * 100

# count all rows in the merged data where the math score AND reading score are greater than or equal to 70(passing) and assign to passing_math_reading_count
# determine the percentage passing using the passing_math_reading_count divide by student count calculated above and then multiply by 100 to get percent
passing_math_reading_count = school_data_complete[(school_data_complete["math_score"] >= 70) & 
                                                  (school_data_complete["reading_score"] >= 70)].count()["student_name"]
overall_passing_rate = passing_math_reading_count /  float(student_count) * 100

# Create district_summary dataframe using calculated variables above

district_summary_data = [{
    "Total Schools": school_count,
    "Total Students": student_count,
    "Total Budget": total_budget,
    "Average Math Score": average_math_score,
    "Average Reading Score": average_reading_score,
    "% Passing Math": passing_math_percentage,
    "% Passing Reading": passing_reading_percentage,
    "% Passing Overall": overall_passing_rate
}]

district_summary = pd.DataFrame(district_summary_data)

# Format Total Students and Total Budget
district_summary["Total Students"] = district_summary["Total Students"].map("{:,}".format)
district_summary["Total Budget"] = district_summary["Total Budget"].map("${:,.2f}".format)

# Display the DataFrame
district_summary

#-----------------

# Use the code provided to select the type per school from school_data using type
school_types = school_data.set_index(["school_name"])["type"]

# Calculate the total student count per school from school_data using size
per_school_counts = school_data.set_index(["school_name"])["size"]

# Determine the total school budget per school from school_data using budget
# Determine the per capita spending per school from school_data using per_school_budget divided by Per_school_count calculated above
per_school_budget = school_data.set_index(["school_name"])["budget"]
per_school_capita = per_school_budget / per_school_counts

# Using the merged data group by scho0l name, average math score and assign to per_school_math
# Using the merged data group by school name, reading score average and assign to per_school_reading
per_school_math = school_data_complete.groupby("school_name").math_score.mean()
per_school_reading = school_data_complete.groupby("school_name").reading_score.mean()

# find the number of students per school with math scores greater than or equal to 70 using the merged data 
# Group by school name to get the data per school
students_passing_math = school_data_complete.loc[school_data_complete["math_score"] >= 70]
school_students_passing_math = students_passing_math.groupby(["school_name"]).size()

# find the number of students per school with reading scores greater than or equal to 70 using the merged data 
# Group by school name to get the data per school
students_passing_reading = school_data_complete.loc[school_data_complete["reading_score"] >= 70]
school_students_passing_reading = students_passing_reading.groupby(["school_name"]).size()

# Deterimine the number of students that passed both math and reading with scores greater than or equal to 70 in both using the merged data
# Group by school name, size to get the data per school
students_passing_math_and_reading = school_data_complete[
    (school_data_complete["reading_score"] >= 70) & (school_data_complete["math_score"] >= 70)
]
school_students_passing_math_and_reading = students_passing_math_and_reading.groupby(["school_name"]).size()

# Determine the overal passing_rate by using passing calculations above and dividing them by per_school_counts, multiply by 100 to get the percent
per_school_passing_math = school_students_passing_math / per_school_counts * 100
per_school_passing_reading = school_students_passing_reading / per_school_counts * 100
overall_passing_rate = school_students_passing_math_and_reading / per_school_counts * 100

# Create DataFrame `per_school_summary` with columns from the calculations above.
per_school_summary_data = {
                            "School Type": school_types,
                            "Total Students": per_school_counts,
                            "Total School Budget": per_school_budget,
                            "Per Student Budget": per_school_capita,
                            "Average Math Score": per_school_math,
                            "Average Reading Score": per_school_reading,
                            "Percent Passing Math": per_school_passing_math,
                            "Percent Passing Reading": per_school_passing_reading,
                            "Percent Passing Overall": overall_passing_rate
}

per_school_summary = pd.DataFrame(per_school_summary_data)

# Format Data
per_school_summary["Total School Budget"] = per_school_summary["Total School Budget"].map("${:,.2f}".format)

# There is A BUG in the homework - Per Student Budget is required to be a number for the pd.cut later
# My Professor said it's all good. Professor approved THIS IS A THROWAWAY LINE.
# per_school_summary["Per Student Budget"] = per_school_summary["Per Student Budget"].map("${:,.2f}".format)

# Display the DataFrame
per_school_summary

#------------------------

# Sort the schools by `Percent Overall Passing` in descending order using ascending=False and display the top 5 rows. 
# Create Dataframe top_schools
top_schools = per_school_summary.sort_values(by="Percent Passing Overall", ascending=False)
top_schools.head(5)

#------------------------

# Sort the schools by `Percent Overall Passing` in ascending order using ascending=True and display the top 5 rows.
# Create Dataframe bottom_schools
bottom_schools = per_school_summary.sort_values(by="Percent Passing Overall", ascending=True)
bottom_schools.head(5)

#-------------------------

# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]

# For each grade (calculated above) Group by `school_name` and take the average (mean) of the `math_score` column for each.
ninth_grade_math_scores = ninth_graders.groupby("school_name").math_score.mean()
tenth_grader_math_scores = tenth_graders.groupby("school_name").math_score.mean()
eleventh_grader_math_scores = eleventh_graders.groupby("school_name").math_score.mean()
twelfth_grader_math_scores = twelfth_graders.groupby("school_name").math_score.mean()

# Combine each of the scores above into single DataFrame called `math_scores_by_grade`

math_scores_by_grade_data = {
                             "9th": ninth_grade_math_scores,
                             "10th": tenth_grader_math_scores,
                             "11th": eleventh_grader_math_scores,
                             "12th": twelfth_grader_math_scores
                            }

math_scores_by_grade = pd.DataFrame(math_scores_by_grade_data)

# Minor data wrangling
math_scores_by_grade.index.name = None

# Display the DataFrame
math_scores_by_grade

#--------------------------

# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]

# For each grade (calculated above) Group by `school_name` and take the average (mean) of the `reading_score` column for each.
ninth_grade_reading_scores = ninth_graders.groupby("school_name").reading_score.mean()
tenth_grader_reading_scores = tenth_graders.groupby("school_name").reading_score.mean()
eleventh_grader_reading_scores = eleventh_graders.groupby("school_name").reading_score.mean()
twelfth_grader_reading_scores = twelfth_graders.groupby("school_name").reading_score.mean()

# Combine each of the scores above into single DataFrame called `reading_scores_by_grade`
reading_scores_by_grade_data = {
    "9th": ninth_grade_reading_scores,
    "10th": tenth_grader_reading_scores,
    "11th": eleventh_grader_reading_scores,
    "12th": twelfth_grader_reading_scores
}
reading_scores_by_grade = pd.DataFrame(reading_scores_by_grade_data)

# Minor data wrangling
# reading_scores_by_grade = reading_scores_by_grade[["9th", "10th", "11th", "12th"]]
reading_scores_by_grade.index.name = None

# Display the DataFrame
reading_scores_by_grade

#------------------------

# Establish the bins
spending_bins = [0, 585, 630, 645, 680]
labels = ["<$585", "$585-630", "$630-645", "$645-680"]

# Create a copy of the school summary since it has the "Per Student Budget"
school_spending_df = per_school_summary.copy()

# Use `pd.cut` to categorize spending based on the bins. (This is the reason we left "Per Student Budget" a number above and didn't format it.
school_spending_df["Spending Ranges (Per Student)"] = pd.cut(school_spending_df["Per Student Budget"], bins=spending_bins, labels=labels)

#  Calculate averages for the desired columns.
spending_math_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Average Math Score"].mean()
spending_reading_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Average Reading Score"].mean()
spending_passing_math = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Percent Passing Math"].mean()
spending_passing_reading = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Percent Passing Reading"].mean()
overall_passing_spending = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Percent Passing Overall"].mean()

# Assemble into DataFrame
spending_summary_data = {
                         "Average Math Score": spending_math_scores,
                         "Average Reading Score": spending_reading_scores,
                         "Percent Passing Math": spending_passing_math,
                         "Percent Passing Reading": spending_passing_reading,
                         "Percent Passing overall": overall_passing_spending
}

spending_summary = pd.DataFrame(spending_summary_data).reset_index()
# Display results
spending_summary

#------------------

# Establish the bins.
size_bins = [0, 1000, 2000, 5000]
labels = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]

# Categorize the spending based on the bins
# Use `pd.cut` on the "Total Students" column of the `per_school_summary` DataFrame.

per_school_summary["School Size"] = pd.cut(per_school_summary["Total Students"], bins=size_bins, labels=labels)

# Calculate averages for the desired columns.
size_math_scores = per_school_summary.groupby(["School Size"])["Average Math Score"].mean()
size_reading_scores = per_school_summary.groupby(["School Size"])["Average Reading Score"].mean()
size_passing_math = per_school_summary.groupby(["School Size"])["Percent Passing Math"].mean()
size_passing_reading = per_school_summary.groupby(["School Size"])["Percent Passing Reading"].mean()
size_overall_passing = per_school_summary.groupby(["School Size"])["Percent Passing Overall"].mean()

# Create a DataFrame called `size_summary` that breaks down school performance based on school size (small, medium, or large).
# Use the scores above to create a new DataFrame called `size_summary`
size_summary_data = {
                     "Average Math Score": size_math_scores,
                     "Average Reading Score": size_reading_scores,
                     "Percent Passing Math": size_passing_math,
                     "Percent Passing Reading": size_passing_reading,
                     "Percent Passing Overall": size_overall_passing
                    }

size_summary = pd.DataFrame(size_summary_data).reset_index()

# Display results
size_summary

#------------------

# Group the per_school_summary DataFrame by "School Type" and average the results.
average_math_score_by_type = per_school_summary.groupby(["School Type"])["Average Math Score"].mean()
average_reading_score_by_type = per_school_summary.groupby(["School Type"])["Average Reading Score"].mean()
average_percent_passing_math_by_type = per_school_summary.groupby(["School Type"])["Percent Passing Math"].mean()
average_percent_passing_reading_by_type = per_school_summary.groupby(["School Type"])["Percent Passing Reading"].mean()
average_percent_overall_passing_by_type = per_school_summary.groupby(["School Type"])["Percent Passing Overall"].mean()

# Assemble the new data by type into a DataFrame called `type_summary`
type_summary_data = {
    "Average Math Score": average_math_score_by_type,
    "Average Reading Score": average_reading_score_by_type,
    "Percent Passing Math": average_percent_passing_math_by_type,
    "Percent Passing Reading": average_percent_passing_reading_by_type,
    "Percent Overall Passing": average_percent_overall_passing_by_type
}

type_summary = pd.DataFrame(type_summary_data).reset_index()

# Display results
type_summary


